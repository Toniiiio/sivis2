% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sivis.R
\name{find_doc_type}
\alias{find_doc_type}
\title{Get document type of response string}
\usage{
find_doc_type(response_string, target_values)
}
\arguments{
\item{response_string}{The text of the server response for which it is expected to contain the target values}

\item{target_values}{The strings selected by the user within the browser. For these values the corresponding extraction
method has to be found.}
}
\value{
Returns the document type of the response_string variable. Values are either json, html/xml, scriptJSON (which is a json within javascript code).
Or "unknown type" if none of the other values are matched. That would be the rare case when the target values are within unstructured text and it
would yield to difficulties finding an extraction method for them.
}
\description{
Given the filtered response on the browser side the document type is evaluated.
Potential values are either json, html/xml, scriptJSON (which is a json within javascript code).
Or "unknown type". For details see 'Value'. \cr \cr
The identification of html is not straight forward, because plain text is also html.
html does not have to include the following tags: html + body because additional html content might be loaded via ajax.
The final goal within sivis is not to identify the document type, but the document
type is a vehical to identify an extraction method to yield the target values. \cr
So the question is if the string under consideration is structured in a way that xpath can be used to make a (sub)-extraction of the target values.
Therefore, the variable response_string is required to identify the document type html. It is attempted to
generate an xpath. If that is successful the document type html will be assigned. \cr \cr
Jsons are identified with jsonlite:::validate(). \cr \cr
Jsons within javascript code are identified with regex. For json objects "\\{(?:[^{}]+|(?R))*?\\}" and for
jsonArray  "\\[.*?\\]" is used. \cr
It can be the case, that both jsonArray and json_objects match and they contain the same
amount of matches as the structure is [{...}, {...}, {...},]. In that case
it is prefered to have a single json array, instead of multiple json_objects, since it is easier to parse.
}
\examples{
library(magrittr)
doc_html <- "<html><div><a>target_text</a></div></html>"
find_doc_type(response_string = doc_html, target_values = "target_text")

doc_json <- '{"target": "target_text"}'
find_doc_type(response_string = doc_json, target_values = "target_text")

doc_script_json <- 'var doc = {target: "target_text"}'
find_doc_type(response_string = doc_script_json, target_values = "target_text")

doc_unknown <- "This is unstructured target_text."
find_doc_type(response_string = doc_unknown, target_values = "target_text")
}
